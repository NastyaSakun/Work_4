1.	Перегрузка операторов в программировании — один из способов реализации полиморфизма, заключающийся в возможности одновременного существования в одной области видимости нескольких различных вариантов применения оператора, имеющих одно и то же имя, но различающихся типами параметров, к которым они применяются.

2.	public static возвращаемый_тип operator оператор(параметры)
{  }

3. &&, || 	Условные логические операторы не могут быть перегружены, но они оцениваются с помощью & и |, которые могут быть перегружены.
[] 	Оператор индексирования массива не может быть перегружен, но можно определить индексаторы.
(T)x 	Оператор приведения типов не может быть перегружен, но можно определить новые операторы преобразования (см. explicit и implicit).
+=, -=, *=, /=, %=, &=, |=, ^=, <<=, >>= 	Операторы присваивания не могут быть перегружены явным образом. Однако при перегрузке бинарного оператора соответствующий оператор присваивания (если таковой имеется) также неявно перегружается. Например, += вычисляется с помощью +, который может быть перегружен.
=, ., ?:, ??, ->, =>, f(x), as, checked, unchecked, default, delegate, is, new, sizeof, typeof 	Эти операторы не могут быть перегружены.
 
4. При перегрузке операторов также следует помнить, что мы не можем изменить приоритет оператора или его ассоциативность.
5. Да, верно: при перегрузке операторов надо учитывать, что не все операторы можно перегрузить. В частности, мы можем перегрузить следующие операторы:
•	унарные операторы +, -, !, ~, ++, --
•	бинарные операторы +, -, *, /, %
•	операции сравнения ==, !=, <, >, <=, >=
•	логические операторы &&, ||
•	операторы присваивания +=, -=, *=, /=, %=
6. Бинарные операторы принимают два параметра, унарные - один параметр.
7. Нельзя
8. Нельзя
9. int min = Convert.ToInt32(list[0]);
10. Методы расширения позволяют "добавлять" методы в существующие типы без создания нового производного типа, перекомпиляции и иного изменения первоначального типа. Самые обычные методы расширения — стандартные операторы запросов LINQ, которые добавляют функции запросов в существующие типы System.Collections.IEnumerable и System.Collections.Generic.IEnumerable<T>. Для использования стандартных операторов запросов их необходимо ввести в область действия с помощью директивы using System.Linq. Тогда каждый тип, реализующий тип IEnumerable<T>, будет иметь методы экземпляра, в частности GroupBy, OrderBy, Average и т. д. Эти дополнительные методы можно видеть в завершении операторов IntelliSense при вводе точки после экземпляра типа IEnumerable<T>, например List<T> или Array.
11. Неявное преобразование (implicit)
12. Не знаю
13. 4)
